short term tasks:

  create a simple relational surrounding text finder [COMPLETE]
    return surrounding text of a keyword if another keyword is near it
    {given by SETTIGNS.RELATIONAL_PROXIMITY}.
      example:
        searcher.findAllWithRelation(keyword, relation)

    time started: 1:44 pm, 1/3/2021
    time frames: [
      (1:44 pm, 3:14 pm)
    ]
    time ended: 3:14 pm, 1/3/2021
      


  create command based ui for easy search [COMPLETE]

  time started: 4:20pm, 1/3/2021
  time frames: [
    (4:20pm, 5:52pm)
  ]
  time ended: 5:52pm, 1/3/2021

  create text files to hold relational database information [COMPLETE]

  time started: 9:24am 1/5/2021
  time frames: [
    (9:24am, 9:53am)
  ]
  time ended: 9:53 1/5/2021

  loader should be able to load relational database information from text files [COMPLETE]

  time started:  9:24am 1/5/2021
  time frames: [
    (9:24am, 9:53am)
  ]
  time ended: 9:53am 1/5/2021


  loader should be able to load mapping data from text files [COMPLETE]

  time started: 9:53am 1/5/2021
  time frames: [
    (9:53am, 10:00am)
  ]
  time ended: 10:00am 1/5/2021

  clean up setup confirmations [COMPLETE]

  time started: 10:00 am 1/5/2021
  time frames: [
    (10:00am, 10:09am)
  ]
  time ended: 10:09am 1/5/2021

  export results to spreadsheet [FEATURE][INCOMPLETE]

  time started: 
  time frames: [
    
  ]
  time ended:

  search phrases [FEATURE][CURRENT]

  time started: 
  time frames: [
    
  ]
  time ended:

  fix reoccurence [BUG][INCOMPLETE]

  time started: 
  time frames: [
    
  ]
  time ended:

long term task:

  create relational database
    - create relational mappings for each word
    - Example: What it will look like:
      some hash value: {
        word:'text',

        surrounding_text_relations: [
          [surrounding text {given by SETTINGS.SEARCH PROXIMITY}]
        ],

        doubles : [
          [every two word combination, in order]
        ],

        triples : [
          [every three word combination, in order]
        ],

        quadruples: [
          [every four word combination, in order]
        ],

        quintuples: [
          [every five word combination, in order]
        ],
        
        possible_reccurent_phrases: [
          [go through all doubles, triples, quadruples, and quintuples and look for reoccurence]
        ]

        
      }
      time started: 6:00pm, 1/3/2021
      time frames: [
        (6:00pm, 6:43pm), (10:22am, 1:24pm)
      ]
      time ended: 1:24pm, 1/4/2021



  create GUI
    time started: 
    time frames: [
    
    ]
    time ended: